/**
 * 
 */
import java.util.*;
import java.io.*;

/**
 * @author Xin
 *
 */
public class URLinkedList<E> implements URList<E> {
	
	private URLink<E> head;
	private URLink<E> tail;
	private int size;
	
	class URLink<E> {
		// Doubly linked list node
		private E e; // Value for this node
		private URLink<E> n; // Pointer to next node in list
		private URLink<E> p; // Pointer to previous node
		
		// Constructors
		URLink(E it, URLink<E> inp, URLink<E> inn) { e = it; p = inp; n = inn; }
		URLink(URLink<E> inp, URLink<E> inn) { p = inp; n = inn; }
		
		// Get and set methods for the data members
		public E element() { return e; } // Return the value
		public E setElement(E it) { return e = it; } // Set element value
		public URLink<E> next() { return n; } // Return next link
		public URLink<E> setNext(URLink<E> nextval) { return n = nextval; } // Set next link
		public URLink<E> prev() { return p; } // Return prev link
		public URLink<E> setPrev(URLink<E> prevval) { return p = prevval; } // Set prev link
		
	}
	
	public URLinkedList() {
		head = new URLink<E>(null, null);
		tail = new URLink<E>(null, null);
		head.setNext(tail);
		tail.setPrev(head);
		head.setPrev(null);
		tail.setNext(null);
		size = 0;
	}
	
	public boolean add(E e) {
		URLink<E> newLink = new URLink<E>(e, tail.prev(), tail);
		tail.setPrev(newLink);
		newLink.prev().setNext(newLink);
		size++;
		return true;
		
	}
	
	public void add(int index, E element) {
		
	}
	
	private URLink<E> indexLink(int index) {
		if (index <= 0) throw new IllegalArgumentException("position larger than size");
		if (index > size) throw new IllegalArgumentException("position larger than size");
		URLink<E> tempLink = head;
		for (int i = 0; i <= index; i++)
			if (i != 0)
				tempLink = tempLink.next();	
		return 	tempLink;
	} 
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
